name: Build and Push Docker Image

on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      POLICY: "jtb75-vuln-policy" # Set the desired Wiz CLI policy to use
      REPO: "harbor.k8s.ng20.org/weather-wizard/weather-front-end"

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Harbor
      - name: Log in to Harbor
        uses: docker/login-action@v2
        with:
          registry: harbor.k8s.ng20.org
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      # Step 4: Extract current tag version
      - name: Get current version
        id: version
        run: |
          echo "Fetching current version from Harbor registry..."
          response=$(curl -s -u '${{ secrets.HARBOR_USERNAME }}:${{ secrets.HARBOR_PASSWORD }}' \
            https://harbor.k8s.ng20.org/v2/weather-wizard/weather-front-end/tags/list)
          echo "Response from registry: $response"

          tags=$(echo "$response" | jq -r '.tags | select(. != null) | .[]' | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
          echo "Extracted tags: $tags"

          if [[ -z "$tags" ]]; then
            echo "latest_tag=0.0.0" >> $GITHUB_ENV
          else
            echo "latest_tag=$tags" >> $GITHUB_ENV
          fi
          echo "Current tag: $tags"

      # Step 5: Increment the tag version
      - name: Increment version
        id: increment_version
        run: |
          echo "Incrementing tag version..."
          IFS='.' read -r -a parts <<< "$latest_tag"
          parts[2]=$((parts[2] + 1))
          new_version="${parts[0]}.${parts[1]}.${parts[2]}"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "New version: $new_version"

      # Step 6: Build Docker image
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.REPO }}:${{ env.new_version }}

      # Step 6.2: Download Wiz CLI
      - name: Download Wiz CLI
        run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

      # Step 6.3: Authenticate to Wiz
      - name: Authenticate to Wiz
        run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      # Step 6.3.1: Run Wiz CLI Docker image scan
      - name: Run Wiz CLI Docker image scan
        run: ./wizcli docker scan --image ${{ env.REPO }}:${{ env.new_version }} --policy "$POLICY"

      # Step 7: Push Docker image
      - name: Push Docker image
        run: docker push ${{ env.REPO }}:${{ env.new_version }}

      # Step 8: Extract digest of Docker image
      - name: Extract digest of Docker image
        id: extract-digest
        run: |
          digest=$(docker inspect ${{ env.REPO }}:${{ env.new_version }} | jq -r '.[0].RepoDigests[0]' | cut -d'@' -f2)
          echo "digest=$digest" >> $GITHUB_ENV
          echo "digest=$digest" >> $GITHUB_OUTPUT
          echo "Stored digest: $digest"
        env:
          REPO: ${{ env.REPO }}
          new_version: ${{ env.new_version }}

      # Step 9: Fetch digest of Docker image for Graph enrichment
      - name: Fetch digest of Docker image for Graph enrichment
        run: ./wizcli docker tag --image ${{ env.REPO }}:${{ env.new_version }} --digest $digest
        env:
          digest: ${{ steps.extract-digest.outputs.digest }}

      # Step 10: Output new version
      - name: Output new version
        run: echo "Docker image pushed with tag ${{ env.new_version }}"

      # Step 11: Trigger deployment update workflow using curl
      - name: Trigger deployment update workflow
        run: |
          echo "Triggering deployment update workflow with curl..."
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            https://api.github.com/repos/jtb75/weather-wizard-deployment/actions/workflows/update-deployment.yml/dispatches \
            -d '{"ref":"prod", "inputs": {"new_version": "${{ env.new_version }}"}}'
